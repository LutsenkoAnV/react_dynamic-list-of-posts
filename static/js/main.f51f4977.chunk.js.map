{"version":3,"sources":["api/api.ts","components/User/User.tsx","components/CommentList/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["API_URL","getData","url","a","fetch","response","json","User","person","className","name","email","address","street","suite","city","zipcode","Comment","comment","body","CommentList","comments","map","key","id","Post","post","user","title","PostList","postlist","App","useState","posts","setPosts","isLoading","setLoading","isStarted","setStarted","query","setQuery","filterQuery","setFilterQuery","setFilterQueryWithDebounce","useCallback","debounce","filtered","useMemo","filterValue","toLowerCase","filter","includes","type","disabled","onClick","Promise","all","then","postsFromApi","usersFromApi","commentsFromApi","preparedPosts","find","userId","postId","htmlFor","value","placeholder","onChange","event","target","handleChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f51f4977.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getPosts = (): Promise<Posts> => {\n  return getData(`${API_URL}posts`);\n};\n\nexport const getUsers = (): Promise<Users> => {\n  return getData(`${API_URL}users`);\n};\n\nexport const getComments = (): Promise<Comments> => {\n  return getData(`${API_URL}comments`);\n};\n","import React, { FC } from 'react';\nimport './User.css';\n\ninterface Props {\n  person: User;\n}\n\nexport const User: FC<Props> = ({ person }) => {\n  return (\n    <div className=\"user\">\n      <h3 className=\"user__heading\">\n        {person.name}\n      </h3>\n      <p className=\"user__email\">\n        E-mail:\n        <span>\n          {` ${person.email}`}\n        </span>\n      </p>\n      <address className=\"user__address\">\n        <span>\n          street:\n          {` ${person.address.street}`}\n        </span>\n        <span>\n          suite:\n          {` ${person.address.suite}`}\n        </span>\n        <span>\n          city:\n          {` ${person.address.city}`}\n        </span>\n        <span>\n          zipcode:\n          {` ${person.address.zipcode}`}\n        </span>\n      </address>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport './Comment.css';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => {\n  return (\n    <div className=\"comment\">\n      <h3 className=\"comment__name\">{comment.name}</h3>\n      <p className=\"comment__email\">{comment.email}</p>\n      <p className=\"comment__text\">{comment.body}</p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from './Comment';\n\ninterface Props {\n  comments: Comments;\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => {\n  return (\n    <div>\n      {comments.map(comment => (\n        <Comment key={comment.id} comment={comment} />\n      ))}\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\nimport './Post.css';\n\ninterface Props {\n  post: PostWithComments;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  return (\n    <div className=\"post\">\n      <User person={post.user} />\n      <h2 className=\"post__heading\">{post.title}</h2>\n      <p className=\"post__text\">{post.body}</p>\n      <CommentList comments={post.comments} />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { Post } from '../Post/Post';\n\ninterface Props {\n  postlist: PostWithComments[];\n}\n\nexport const PostList: FC<Props> = ({ postlist }) => {\n  return (\n    <div>\n      {postlist.map(post => (\n        <Post key={post.id} post={post} />\n      ))}\n    </div>\n  );\n};\n","import React, {\n  FC, useState, useMemo, useCallback,\n} from 'react';\nimport debounce from 'lodash/debounce';\nimport { getPosts, getUsers, getComments } from './api/api';\nimport { PostList } from './components/PostList/PostList';\nimport './App.css';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<PostWithComments[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isStarted, setStarted] = useState(true);\n  const [query, setQuery] = useState<string>('');\n  const [filterQuery, setFilterQuery] = useState<string>('');\n\n  const loadData = () => {\n    setLoading(true);\n\n    Promise.all([getPosts(), getUsers(), getComments()])\n      .then(([postsFromApi, usersFromApi, commentsFromApi]) => {\n        const preparedPosts = postsFromApi.map(post => ({\n          ...post,\n          user: usersFromApi.find(person => post.userId === person.id) as User,\n          comments: commentsFromApi.filter(comment => post.id === comment.postId) as Comments,\n        }));\n\n        setPosts(preparedPosts);\n        setLoading(false);\n        setStarted(false);\n      });\n  };\n\n  const setFilterQueryWithDebounce = useCallback(debounce(setFilterQuery, 1000), []);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    setQuery(value);\n    setFilterQueryWithDebounce(value);\n  };\n\n  const filtered = useMemo<PostWithComments[]>(() => {\n    const filterValue = filterQuery.toLowerCase();\n\n    return posts.filter(post => (\n      post.title.toLowerCase().includes(filterValue)\n      || post.body.toLowerCase().includes(filterValue)\n    ));\n  }, [filterQuery, posts]);\n\n  return (\n    <>\n      {isStarted\n        ? (\n          <button\n            type=\"button\"\n            className=\"button button-load\"\n            disabled={isLoading}\n            onClick={loadData}\n          >\n            {isLoading ? 'Loading...' : 'Load'}\n          </button>\n        ) : (\n          <div className=\"App\">\n            <label htmlFor=\"search-query\" className=\"label\">\n              Search\n              <div className=\"control\">\n                <input\n                  type=\"text\"\n                  id=\"search-query\"\n                  value={query}\n                  className=\"input\"\n                  placeholder=\"Title and body search\"\n                  onChange={(event) => handleChange(event)}\n                />\n              </div>\n            </label>\n            <PostList postlist={filterQuery ? filtered : posts} />\n          </div>\n        )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}